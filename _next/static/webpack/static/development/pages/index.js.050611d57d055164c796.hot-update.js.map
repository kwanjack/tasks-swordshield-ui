{"version":3,"file":"static/webpack/static/development/pages/index.js.050611d57d055164c796.hot-update.js","sources":["webpack:///./components/TaskList.js"],"sourcesContent":["import { useTasks, usePriorities } from '../hooks/customHooks';\nimport { List, arrayMove } from 'react-movable';\nimport { moveTaskToRank, removeTaskById, removePriorityById } from '../mock_api/models'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nlet listStyle = <style jsx=\"true\">{`\n.draggable-list {\n  margin-top: 80px;\n  overflow: auto;\n  max-height: -webkit-calc(100vh - 30px);\n  -webkit-mask-image: -webkit-gradient(linear, left center, left bottom, from(rgba(0,0,0,1)), to(rgba(0,0,0,0)));\n}\n\n.draggable-left {\n  background: lightgrey;\n  width: 30px;\n  padding: 0px;\n  margin: 0px;\n  height: 100%;\n}\n\n.list-item-content {\n  width: 95%;\n  display: flex;\n  flex-direction: row;\n  height: 40px;\n  align-items: center;\n  font-weight: 700;\n}\n\nul { padding: 0px; }\n\nli:hover {\n  cursor: move; /* fallback if grab cursor is unsupported */\n  cursor: grab;\n}\n\nli {\n  display: flex;\n  margin: 10px 0px;\n  background-color: white;\n  list-style-type: none;\n  font-size: 20px;\n  height: 40px;\n  justify-content: space-between;\n  flex-direction: row;\n}\n\n.list-item-name {\n  text-align: left;\n  padding-left: 10px;\n  flex: 1;\n}\n\n.trash-button {\n  border: none;\n  margin: 0;\n  padding: 0;\n  width: auto;\n  overflow: visible;\n  cursor: pointer;\n  background: transparent;\n  font-size: 20px;\n}\n\n.l\n`}</style>;\n\nlet sortTasksUsingPriority = (pickedPriorityId, tasks) => {\n  let priorities = usePriorities() || [];  \n  if (!pickedPriorityId || priorities.length === 0) { return []; }\n\n  let result = [];\n  let priority = priorities.find(priority => priority.id === pickedPriorityId);\n  if (!priority ) { return []; }\n  for (let i = 0; i < priority.ranking.length; i++) {\n    let ranking = priority.ranking[i];\n    let task = tasks.find(task => task.id === ranking);\n    result.push(task);\n  };\n\n  result = result.filter(item => item !== undefined); \n  return result;\n};\n\n\nconst TaskList = props => {\n  let { tasks, pickedPriorityId } = props;\n  let sortedTasks = sortTasksUsingPriority(pickedPriorityId, tasks);\n  let items = sortedTasks.map(st => st.name);\n  \n  return (\n    <List \n      values={items}\n      removableByMove={true}\n      onChange={({ oldIndex, newIndex, targetRect }) => {\n          console.log('targetRect:', targetRect);\n          if (newIndex === -1) { return removeTaskById(sortedTasks[oldIndex].id); }\n          moveTaskToRank(sortedTasks[oldIndex].id, pickedPriorityId, newIndex);\n        }\n      }\n      \n      renderList={({ children, props }) => <ul className=\"draggable-list\" {...props}>{children} {listStyle}</ul>}\n      renderItem={({ value, props, index }) => <li className=\"list-item\" {...props}>\n        <div className=\"list-item-content\">\n          <div className=\"draggable-left\"></div>\n          <div className=\"list-item-name\"> {value} </div>\n          <button className=\"trash-button\" onClick={() =>  removeTaskById(sortedTasks[index].id) } >\n            <FontAwesomeIcon icon={faTrash}/>\n          </button>\n        </div>\n      </li>}>\n    </List>\n  );\n};\nexport default TaskList;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA8DA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAPA;AAQA;AACA;AAAA;AAAA;AACA;AAVA;AACA;AAMA;AAAA;AAIA;AACA;AADA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AAAA;;;;A","sourceRoot":""}